import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card"
import { Button } from "../components/ui/button"
import { Badge } from "../components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "../components/ui/avatar"
import { Input } from "../components/ui/input"
import {
  Shield,
  Flag,
  MessageSquare,
  Users,
  AlertTriangle,
  CheckCircle,
  XCircle,
  MoreHorizontal,
  Search,
  Eye,
  Ban,
  User,
  LogOut,
  MessageCircle,
  TrendingUp,
  ThumbsUp,
  ThumbsDown,
  Bell,
  Edit,
  Trash2,
  Plus,
} from "lucide-react"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "../components/ui/dropdown-menu"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../components/ui/select"
import { useAuth } from "../hooks/useAuth"
import { useToast } from "../context/ToastContext"
import { checkRole } from "../utils/auth"
import { useNavigate } from "react-router-dom"
import postsApi from "../api/posts"

export default function ModeratorDashboard() {
  const [activeTab, setActiveTab] = useState("dashboard")
  const [posts, setPosts] = useState([])
  const [searchTerm, setSearchTerm] = useState("")
  const [filterStatus, setFilterStatus] = useState("all")
  const [isLoading, setIsLoading] = useState(true)
  const [dashboardStats, setDashboardStats] = useState([])
  const { user, logout } = useAuth()
  const { showToast } = useToast()
  const navigate = useNavigate()

  // Check moderator permission
  useEffect(() => {
    if (user && !checkRole(user.role, 'moderator')) {
      showToast("Access denied: Moderator privileges required", { type: "error" })
      navigate('/', { replace: true })
    }
  }, [user, showToast, navigate])

  const tabs = [
    { id: "dashboard", label: "Dashboard", icon: TrendingUp },
    { id: "posts", label: "Posts", icon: MessageSquare },
    { id: "comments", label: "Comments", icon: MessageCircle },
  ]

  // Fetch posts data
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const postsResponse = await postsApi.getAllPosts();
        setPosts(postsResponse);
        
        // Set dashboard stats
        setDashboardStats([
          { 
            title: "Total Posts", 
            value: postsResponse.length, 
            change: "+5 today", 
            icon: MessageSquare, 
            color: "text-blue-600", 
            bg: "bg-blue-100" 
          },
          {
            title: "Posts Flagged",
            value: postsResponse.filter(post => post.flags && post.flags.length > 0).length,
            change: "+2 today",
            icon: Flag,
            color: "text-red-600",
            bg: "bg-red-100",
          },
          {
            title: "Popular Posts",
            value: postsResponse.filter(post => post.votes && post.votes.length > 10).length,
            change: "+3 this week",
            icon: ThumbsUp,
            color: "text-green-600",
            bg: "bg-green-100",
          },
          {
            title: "Posts Reviewed",
            value: "45",
            change: "+8 this week",
            icon: CheckCircle,
            color: "text-purple-600",
            bg: "bg-purple-100",
          },
        ]);
        
      } catch (err) {
        console.error("Failed to fetch posts data", err);
        showToast("Failed to load posts data. Please try again.", { type: "error" });
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [showToast]);

  // Add a delete post handler
  const handleDeletePost = async (postId) => {
    if (window.confirm("Are you sure you want to delete this post?")) {
      try {
        await postsApi.deletePost(postId);
        setPosts(posts.filter(post => post._id !== postId));
        showToast("Post deleted successfully", { type: "success" });
      } catch (error) {
        console.error("Failed to delete post:", error);
        showToast("Failed to delete post", { type: "error" });
      }
    }
  };

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  // Filter posts based on search term
  const filteredPosts = posts.filter(post => 
    post.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    post.content?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    post.author?.username?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {dashboardStats.map((stat) => {
          const Icon = stat.icon
          return (
            <Card key={stat.title}>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">{stat.title}</p>
                    <p className="text-3xl font-bold text-gray-900">{stat.value}</p>
                    <p className="text-sm text-green-600 mt-1">{stat.change}</p>
                  </div>
                  <div className={`${stat.bg} ${stat.color} p-3 rounded-full`}>
                    <Icon className="h-6 w-6" />
                  </div>
                </div>
              </CardContent>
            </Card>
          )
        })}
      </div>

      {/* Recent Activity */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Activity</CardTitle>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex justify-center p-4">Loading activities...</div>
          ) : (
            <div className="space-y-4">
              {posts.slice(0, 5).map((post) => (
                <div key={post._id} className="flex items-center space-x-4 p-3 rounded-lg border">
                  <div className="bg-blue-100 p-2 rounded-full">
                    <MessageSquare className="h-4 w-4 text-blue-600" />
                  </div>
                  <div className="flex-1">
                    <p className="font-medium truncate">{post.title}</p>
                    <p className="text-sm text-gray-500">by {post.author?.username || 'Unknown'}</p>
                  </div>
                  <span className="text-xs text-gray-400">
                    {new Date(post.createdAt).toLocaleDateString()}
                  </span>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )

  const renderPosts = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Posts Management</h2>
        <Button className="bg-orange-500 hover:bg-orange-600" onClick={() => navigate('/create-post')}>
          <Plus className="h-4 w-4 mr-2" />
          Create Post
        </Button>
      </div>

      <div className="flex space-x-4 items-center">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search posts..."
            className="pl-10"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <Select
          value={filterStatus}
          onValueChange={setFilterStatus}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filter" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Posts</SelectItem>
            <SelectItem value="flagged">Flagged</SelectItem>
            <SelectItem value="popular">Popular</SelectItem>
            <SelectItem value="recent">Recent</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {isLoading ? (
        <div className="flex justify-center p-8">Loading posts data...</div>
      ) : (
        <div className="space-y-4">
          {filteredPosts.map((post) => (
            <Card key={post._id}>
              <CardContent className="p-4">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <Badge variant="outline">{post.category?.name || 'Uncategorized'}</Badge>
                      <span className="text-sm text-gray-500">{new Date(post.createdAt).toLocaleDateString()}</span>
                    </div>
                    <h3 className="font-semibold text-lg mb-1">{post.title}</h3>
                    <p className="text-sm text-gray-600 mb-3">by {post.author?.username || 'Unknown'}</p>
                    <div className="flex space-x-4 text-sm text-gray-500">
                      <span>{post.votes?.length || 0} votes</span>
                      <span>{post.comments?.length || 0} comments</span>
                    </div>
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="sm">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuItem onClick={() => navigate(`/posts/${post._id}`)}>
                        <Eye className="h-4 w-4 mr-2" />View
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => navigate(`/edit-post/${post._id}`)}>
                        <Edit className="h-4 w-4 mr-2" />Edit
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => handleDeletePost(post._id)}>
                        <Trash2 className="h-4 w-4 mr-2" />Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  )

  const renderComments = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Comments Management</h2>
      </div>

      <div className="flex space-x-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
          <Input placeholder="Search comments..." className="pl-10" />
        </div>
        <Select defaultValue="all">
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filter" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Comments</SelectItem>
            <SelectItem value="reported">Reported</SelectItem>
            <SelectItem value="recent">Recent</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <Card>
        <CardContent className="p-0">
          <div className="p-6 text-center text-gray-500">
            Comments management feature coming soon.
          </div>
        </CardContent>
      </Card>
    </div>
  )

  const renderContent = () => {
    switch (activeTab) {
      case "dashboard":
        return renderDashboard()
      case "posts":
        return renderPosts()
      case "comments":
        return renderComments()
      default:
        return renderDashboard()
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 px-4 py-3 sticky top-0 z-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <div className="flex items-center space-x-1 text-blue-500">
                <Shield className="h-6 w-6" />
              </div>
              <span className="text-xl font-bold text-blue-500">FoodForum Moderator</span>
            </div>
          </div>

          <div className="flex items-center space-x-4">
            <Button variant="ghost" size="sm" className="relative">
              <Bell className="h-5 w-5" />
              <span className="absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center">
                2
              </span>
            </Button>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={user?.avatar} alt={user?.username} />
                    <AvatarFallback className="bg-blue-100 text-blue-600">
                      {user?.username?.slice(0, 2).toUpperCase() || 'MO'}
                    </AvatarFallback>
                  </Avatar>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56" align="end">
                <DropdownMenuItem onClick={handleLogout}>
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Log out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </header>

      {/* Tabs Navigation */}
      <div className="bg-white border-b border-gray-200">
        <div className="px-4">
          <nav className="flex space-x-8">
            {tabs.map((tab) => {
              const Icon = tab.icon
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex cursor-pointer items-center space-x-2 py-4 px-2 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? "border-blue-500 text-blue-600"
                      : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                  }`}
                >
                  <Icon className="h-4 w-4" />
                  <span>{tab.label}</span>
                </button>
              )
            })}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <main className="p-6">
        {renderContent()}
      </main>
    </div>
  )
}
